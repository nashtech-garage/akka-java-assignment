<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<artifactId>shopping-order-service</artifactId>
	<groupId>com.lightbend.akka.samples</groupId>
	<version>1.0</version>

	<licenses>
		<license>
			<name>Public Domain (CC0)</name>
			<url>http://creativecommons.org/publicdomain/zero/1.0/</url>
		</license>
	</licenses>


	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<scala.binary.version>2.13</scala.binary.version>
		<!-- needs to be defined to allow for overriding through mvn exec:exec -DAPP_CONFIG=local1.conf -->
		<APP_CONFIG>application.conf</APP_CONFIG>
		<!-- Version of the Docker image is derived from git commit.
             It can be defined with -Dversion.number=0.1-SNAPSHOT if git is not used -->
		<version.number>${git.commit.time}-${git.commit.id.abbrev}</version.number>
		<akka-diagnostics.version>2.0.0</akka-diagnostics.version>
		<lombok.version>1.18.28</lombok.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.lightbend.akka</groupId>
				<artifactId>akka-dependencies_${scala.binary.version}</artifactId>
				<version>23.05.0</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-bom</artifactId>
				<version>2021.2.14</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
				<scope>provided</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-http_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-http-jackson_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-persistence-typed_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-persistence-query_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-serialization-jackson_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.lightbend.akka</groupId>
			<artifactId>akka-persistence-jdbc_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.lightbend.akka</groupId>
			<artifactId>akka-projection-eventsourced_${scala.binary.version}</artifactId>
		</dependency>
		<dependency>
			<groupId>com.lightbend.akka</groupId>
			<artifactId>akka-projection-jdbc_${scala.binary.version}</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>5.6.15.Final</version>
		</dependency>


		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.2.27</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.2.11</version>
		</dependency>

		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-actor-testkit-typed_${scala.binary.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-persistence-testkit_${scala.binary.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.lightbend.akka</groupId>
			<artifactId>akka-projection-testkit_${scala.binary.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-stream-testkit_${scala.binary.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-http-testkit_${scala.binary.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.9.2</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-inline</artifactId>
			<version>5.2.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>4.10.0</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<version>5.3.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>
			<version>5.9.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<version>2.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.7</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.typesafe.akka</groupId>
			<artifactId>akka-actor-testkit-typed_${scala.binary.version}</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
			<version>2.15.2</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<source>11</source>
					<target>11</target>
					<compilerArgs>
						<arg>-Xlint:unchecked</arg>
						<arg>-Xlint:deprecation</arg>
						<arg>-parameters</arg>
					</compilerArgs>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<executable>java</executable>
					<arguments>
						<argument>-Djava.library.path=target/lib</argument>
						<argument>-Dconfig.resource=${APP_CONFIG}</argument>
						<argument>-classpath</argument>
						<classpath />
						<argument>shopping.order.Main</argument>
					</arguments>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.diffplug.spotless</groupId>
				<artifactId>spotless-maven-plugin</artifactId>
				<version>2.4.1</version>
				<configuration>
					<java>
						<googleJavaFormat>
							<version>1.8</version>
							<style>GOOGLE</style>
						</googleJavaFormat>
					</java>
				</configuration>
			</plugin>
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>4.0.0</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>revision</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dateFormat>yyyyMMdd-HHmmss</dateFormat>
					<!-- Version can be defined with -Dversion.number=0.1-SNAPSHOT if git is not used -->
					<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
					<failOnNoGitDirectory>false</failOnNoGitDirectory>
					<generateGitPropertiesFile>false</generateGitPropertiesFile>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.35.0</version>
				<configuration>
					<images>
						<image>
							<name>%a</name>
							<build>
								<from>docker.io/library/eclipse-temurin:17.0.3_7-jre-jammy</from>
								<tags>
									<tag>${version.number}</tag>
								</tags>
								<entryPoint>
									<exec>
										<arg>java</arg>
										<arg>-cp</arg>
										<arg>/maven/*</arg>
										<arg>shopping.order.Main</arg>
									</exec>
								</entryPoint>
								<assembly>
									<descriptorRef>artifact-with-dependencies</descriptorRef>
								</assembly>
							</build>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>build-docker-image</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.2</version>
				<configuration>
					<argLine>
						--illegal-access=permit
					</argLine>
					<testFailureIgnore>true</testFailureIgnore>
					<forkCount>2</forkCount>
					<reuseForks>true</reuseForks>
					<argLine>${surefireArgLine}</argLine>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.10</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<destFile>${project.build.directory}/coverage-reports/jacoco.exec</destFile>
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${project.build.directory}/coverage-reports/jacoco.exec</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>default-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>COMPLEXITY</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.70</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
